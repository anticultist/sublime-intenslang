%YAML 1.2
---

# https://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html

name: INTENS
file_extensions: [des, inc, des.in, inc.in]
scope: source.intens

variables:
  base_type: \b(?:CDATA|COLOR|COMPLEX|INTEGER|REAL|STRING)\b
  identifier: '{{base_type}}'
  name: \b[A-Za-z_][A-Za-z_0-9]*\b
  float_number: '\b([0-9][0-9_]*)(\.|(\.([0-9][0-9_]*))?([eE][+\-]?([0-9][0-9_]*))?\b)'
  illegal_names: |-
        (?x)\b(
          ABORT|CDATA|COMPLEX|ELSE|END|EXIT|FUNC|IF|INTEGER|NONE|REAL|RETURN|STRING|STRUCT|WHILE
        )\b
  builtin_functions_with_args: |-
        (?x)\b(
          REQUEST|SEND|SUBSCRIBE
        )\b
  builtin_functions_without_args: |-
        (?x)\b(
          ABORT|ABORTTRANSACTION|ABS|ACOS|ALLOW|ARG|ASIN|ASSIGN_CORR|ATAN|ATAN2|ATTRS|
          BASENAME|BEGINTRANSACTION|
          CHANGED|CLASSNAME|CLEAR|CLEAR_SELECTION|CLEARCYCLE|COMMITTRANSACTION|COMPARE|COMPLEX|COMPOSE|COMPOSE_STRING|CONFIRM|CONFIRM_CANCEL|COPY|COS|
          DATASET_TEXT|DELETE|DELETECYCLE|DIRNAME|DISABLE|DISALLOW|
          ENABLE|
          FILENAME|FIRSTCYCLE|
          GET|GET_SELECTION|GOCYCLE|
          HELPKEY|
          IMAG|
          LABEL|LASTCYCLE|LENGTH|LOAD|LOG|LOG10|
          MAP|MESSAGEBOX|MODIFIED|
          NEWCYCLE|NEXTCYCLE|NODE|
          OPEN|OPEN_FILE|OPEN_URL|
          PACK|PARENT|PASTE|PREVIEW|PRINT|PRINT_LOG|PUBLISH|PUT|
          QUIT|
          RANGE|REAL|REPORT|RESET_ERROR|REST_LOGOFF|REST_LOGON|ROUND|ROUND10|ROUND5|RUN|
          SAVE|SCALE|SELECT_LIST|SERIALIZE|SERIALIZE_FORM|SET|SET_DB_TIMESTAMP|SET_ERROR|SET_INDEX|SET_MQ_HOST|SET_MSG|SET_REASON|SET_RESOURCE|SET_THIS|SIN|SIZE|SORTORDER|SQRT|START|STOP|STRETCH|STRING_DATE|STRING_DATETIME|STRING_TIME|STRING_VALUE|STYLESHEET|
          TAN|THUMBNAIL|TIMESTAMP|TOUCH|
          UNIT|UNMAP|UNSET|UPDATE_FORMS|
          VALID|VAR|VISIBLE|
          WRITE_SETTINGS
        )\b
  builtin_functions_in_nested_context: |-
        (?x)\b(
          ABS|ACOS|ASIN|ATAN|ATAN2|
          COMPOSE|COS|
          HORIZONTAL|
          LOG|LOG10|
          RANGE|ROUND|ROUND10|ROUND5|
          SIN|
          TAN|THUMBNAIL|
          VALID|VERTICAL
        )\b
  builtin_functions: '\b({{builtin_functions_with_args}}|{{builtin_functions_without_args}})\b'


contexts:
  prototype:
    - include: line_comment
    - include: double_quote_string
    - include: numbers
    - include: constants
    - include: predefined_variables
    - include: operators


  double_quote_string:
    - match: '"'
      scope: punctuation.definition.string.begin.intens
      push:
        - meta_scope: string.quoted.double.intens
        - match: '(<(/)?b>|<br(/)?>|<(/)?h[1-6]>|<(/)?html>|<(/)?i>|</table>|<(/)?td>|<(/)?th>|<(/)?tr>|<(/)?u>)'
          scope: keyword.other.DML.html
        - match: '(<table).*(>)'
          captures:
            1: keyword.other.DML.html
            2: keyword.other.DML.html
        - match: '%([1-9]|1[0-5])\b'
          scope: constant.other.placeholder.intens
        - match: '(#)(\h{3}|\h{6})\b'
          scope: constant.other.color.rgb-value.intens
        - match: \\.
          scope: constant.character.escape.intens
        - match: '"'
          scope: punctuation.definition.string.end.intens
          pop: true


  line_comment:
    - match: //
      scope: punctuation.definition.comment.intens
      push:
        - meta_scope: comment.line.intens
        - match: $
          pop: true


  numbers:
    - match: '{{float_number}}'
      scope: constant.numeric.intens


  constants:
    - match: \b(EOLN|FALSE|HIGH|INDEX|INFO|INVALID|JSON|NONE|OLDVALUE|TRUE|TSEP|XML)\b
      scope: constant.language.intens
    - include: reason_expression


  assignments:
    - match: \+=|-=|\*=|/=|//=|%=|@=|&=|\|=|\^=|>>=|<<=|\*\*=
      scope: keyword.operator.assignment.augmented.intens
    - include: simple_assignments


  simple_assignments:
    - match: '=(?!=)'
      scope: keyword.operator.assignment.intens


  reason_expression:
    - match: |-
        (?x)\b(
          REASON_ACTIVATE|REASON_CLEAR|REASON_CLOSE|REASON_CONNECTION|REASON_DROP|
          REASON_DUPLICATE|REASON_INPUT|REASON_INSERT|REASON_MOVE|REASON_OPEN|REASON_PACK|
          REASON_REMOVE|REASON_REMOVE_CONNECTION|REASON_REMOVE_ELEMENT|REASON_SELECT|
          REASON_SELECT_POINT|REASON_SELECT_RECTANGLE|REASON_UNSELECT
        )\b
      scope: constant.other.intens


  predefined_variables:
    - match: \b(BASE|COLORBIT|CURRENT_DATETIME|CURRENT_DATE|CURRENT_TIME|INPUT|SOURCE|SOURCE2|THIS)\b
      scope: variable.language.intens


  operators:
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.intens
    - match: \+|\-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic.intens
    - match: \!
      scope: keyword.operator.logical.intens


  main:
    - include: high_level_blocks
    - include: simple_statements


  high_level_blocks:
    - include: include_statement
    - include: datapool_block
    - include: streamer_block
    - include: operator_block
    - include: functions_block
    - include: ui_manager_block
    - include: ui_struct
    - include: menu_definition
    - include: db_manager_block
    - include: language_block
    - include: end_of_propram
    - match: |-
        (?x)\b(
          DESCRIPTION|HELPFILE|OPEN_URL
        )\b
      scope: keyword.other.intens


###########
# General #
###########

  end_of_propram:
    - match: '\b(END)\b\s*(.)'
      captures:
        1: keyword.other.intens
        2: punctuation.terminator.intens


  simple_statements:
    - include: structures
    - include: sets
    - include: function_statements  # includes variables_definition
    - include: functions


  end_of_statement_pop:
    - match: ;
      scope: punctuation.terminator.intens
      pop: true


  end_of_block_pop:
    - match: '}'
      scope: punctuation.section.block.end.intens
      pop: true


  anonymous_block:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push: anonymous_block_body


  anonymous_block_body:
    - meta_scope: meta.block.intens
    - include: function_statements
    - include: end_of_block_pop


  anonymous_group:
    - match: \(
      scope: punctuation.section.group.begin.intens
      push: anonymous_group_body
    - include: simple_assignments


  anonymous_group_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - match: '{{builtin_functions_in_nested_context}}'
      scope: support.function.builtin.intens
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  func_parameter:
    - match: \b(FUNC|ON_EOS|ON_VIEW_ACTION)\b
      scope: variable.parameter.intens
      push:
        - match: '='
          scope: keyword.operator.assignment.augmented.intens
          set:
            - match: '\b({{name}})\b'
              scope: variable.function.intens
              pop: true


  parameter_block:
    - include: func_parameter
    - match: '\b(SET)\b'
      scope: variable.parameter.intens
      push:
        - match: '='
          scope: keyword.operator.assignment.augmented.intens
          set:
            - match: '\b({{name}})\b'
              scope: storage.type.enum.intens
              pop: true
    - match: '\b(MARGIN|MARKER|RANGE|SCALE|SIZE|THUMBNAIL)\b'
      scope: support.function.builtin.intens
    - match: '\b(CELL|EDITABLE|GLOBAL|LOCKABLE|MATRIX|NO_DEPENDENCIES|OMIT_TTRAIL|OPTIONAL|SCALAR)\b'
      scope: storage.modifier.intens
    - include: argument_assignment
    - match: \,
      scope: punctuation.separator.intens
      set: parameter_block
    - match: '}'
      scope: punctuation.section.group.end.intens
      pop: true
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block
    - include: parameter_group


  parameter_group:
    - match: \(
      scope: punctuation.section.group.begin.intens
      push: parameter_group_body


  parameter_group_body:
    - include: func_parameter
    - include: argument_assignment
    - match: \,
      scope: punctuation.separator.intens
      set: parameter_group_body
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  argument_assignment:
    - match: '\b({{name}})\b\s*(=)\s*(?=")'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
    - match: '\b({{name}})\s*(=)\s*(HIDDEN|HIGH|HORIZONTAL|NONE|VERTICAL)\b'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
        3: constant.language.intens
    - match: '\b({{name}})\s*(=)\s*({{float_number}})'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
        3: constant.numeric.intens
    - match: '\b({{name}})\s*(=)\s*({{builtin_functions}})\b'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
        3: support.function.builtin.intens
    - match: '\b({{name}})\s*(=)\s*(\b[A-Za-z_][A-Za-z_.0-9]*\b)\b'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
        3: variable.other.intens
    - match: '\b({{builtin_functions_in_nested_context}})\b'
      scope: support.function.builtin.intens
    - match: '\b([A-Z][A-Z0-9_]*)\b'
      scope: variable.parameter.intens


  include_statement:
    - match: '^\s*(INCLUDE)\b'
      captures:
        1: "keyword.control.import.intens"


##################
# Datapool Block #
##################

  datapool_block:
    - match: '\b(DATAPOOL)\b'
      captures:
        1: keyword.other.intens
      push: datapool_block_body


  datapool_block_body:
    - match: '\b(END)\b\s+\b(DATAPOOL)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
    - include: structures
    - include: sets
    - include: variables_definition
    - match: \b([A-Z][A-Z0-9_]*)\b
      scope: storage.type.intens
      push: variables_definition_after_type


  structures:
    - match: \b(STRUCT)\b\s+
      scope: meta.struct.intens
      captures:
        1: storage.type.struct.intens
      push:
        - include: end_of_statement_pop
        - include: structures_after_keyword


  structures_after_keyword:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: structures_after_name
    - match: '\b({{name}})\b'
      scope: entity.name.struct.intens
      set: structures_after_name


  structures_after_name:
    - include: inherit_from
    - match: '{'
      scope: punctuation.section.block.begin.intens
      set: [end_of_statement_pop, structure_body]


  structure_body:
    - meta_scope: meta.struct.intens
    - include: end_of_block_pop
    - include: variables_definition
    - match: \b([A-Z][A-Z0-9_]*)\b
      scope: storage.type.intens
      push: variables_definition_after_type


  inherit_from:
    - match: ':'
      push:
        - match: '\b{{name}}\b'
          scope: entity.other.inherited-class.intens
          pop: true


  sets:
    - match: \b(SET)\b\s+
      captures:
        1: storage.type.enum.intens
      push:
        - include: end_of_statement_pop
        - include: sets_after_keyword


  sets_after_keyword:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: sets_after_name
    - match: '\b({{name}})\b'
      scope: entity.name.enum.intens
      set: sets_after_name


  sets_after_name:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: [sets_after_name, set_body]
    - match: \,
      scope: punctuation.separator.intens
      set: sets_after_keyword
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block
    - include: end_of_statement_pop


  set_body:
    - meta_scope: meta.enum.body.intens
    - include: simple_assignments
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  variables_definition:
    - match: \b{{base_type}}\b
      scope: storage.type.intens
      push: variables_definition_after_type


  variables_definition_after_type:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push: parameter_block
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: variables_definition_after_name
    - match: '\b({{name}})\b'
      scope: punctuation.definition.variable.intens
      set: variables_definition_after_name
    - include: end_of_statement_pop
      comment: 'here its an ill-formed definition'


  variables_definition_after_name:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: variables_definition_after_type
    - match: '\('
      scope: punctuation.section.group.begin.intens
      push: variable_conditional_states_body
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block


  variable_conditional_states_body:
    - include: anonymous_group
    - include: simple_assignments
    - include: function_call
    - include: control_keywords
    - match: ','
      scope: punctuation.separator.intens
      set: variable_conditional_states_body
    - match: '\)'
      scope: punctuation.section.group.end.intens
      pop: true


##################
# Streamer Block #
##################

  streamer_block:
    - match: '\b(STREAMER)\b'
      captures:
        1: keyword.other.intens
      push: streamer_block_body


  streamer_block_body:
    - match: '\b(END)\b\s+\b(STREAMER)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


##################
# Operator Block #
##################

  operator_block:
    - match: '\b(OPERATOR)\b'
      captures:
        1: keyword.other.intens
      push: operator_block_body


  operator_block_body:
    - match: '\b(END)\b\s+\b(OPERATOR)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
    - match: |-
        (?x)\b(
          BATCH|LATEXREPORT|MATHEMATICA|MENU|MESSAGE_QUEUE|PROCESS|PROCESSGROUP|PYTHON|REPORTSTREAM|TASK
        )\b
      scope: storage.type.other.intens
    - include: filestream
    - include: socket


  filestream:
    - match: \b(FILESTREAM)\b
      captures:
        1: storage.type.other.intens
      push:
        - include: end_of_statement_pop
        - include: filestream_after_keyword


  filestream_after_keyword:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: filestream_after_name
    - match: '\b({{name}})\b'
      scope: punctuation.definition.variable.intens
      set: filestream_after_name


  filestream_after_name:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: filestream_after_keyword
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block


  socket:
    - match: \b(SOCKET|TIMER|MESSAGE_QUEUE)\b
      captures:
        1: storage.type.other.intens
      push:
        - include: end_of_statement_pop
        - include: sockets_after_keyword


  sockets_after_keyword:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: sockets_after_name
    - match: '\b({{name}})\b'
      scope: punctuation.definition.variable.intens
      set: sockets_after_name


  sockets_after_name:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: sockets_after_keyword
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block


###################
# Functions Block #
###################

  functions_block:
    - match: '\b(FUNCTIONS)\b'
      captures:
        1: keyword.other.intens
      push: functions_block_body


  functions_block_body:
    - match: '\b(END)\b\s+\b(FUNCTIONS)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
    - include: functions
    - include: variables_definition


  functions:
    - match: \b(FUNC)\b
      scope: meta.function.intens
      captures:
        1: storage.type.function.intens
      push:
        - include: end_of_statement_pop
        - include: functions_after_keyword


  functions_after_keyword:
    - include: function_properties
    - include: function_declaration


  function_properties:
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block


  function_declaration:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: function_body
    - match: '\b({{name}})\b'
      scope: entity.name.function.intens
      set: function_body


  function_body:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: function_declaration
      comment: 'forward declaration'
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push:
        - meta_scope: meta.block.intens
        - include: function_statements
        - include: end_of_block_pop


  function_statements:
    - include: variables_definition
    - include: while_loop
    - include: if_statement
    - include: assignments
    - include: anonymous_block
    - include: anonymous_group
    - include: control_keywords
    - match: '\b(ABORT|EXIT|RETURN)\b\s*(;)'
      captures:
        1: keyword.control.intens
        2: punctuation.terminator.intens
    - include: function_call
    - match: ';'
      scope: punctuation.terminator.intens


  function_call:
    - include: run_function
    - match: '\b({{builtin_functions_with_args}})\b'
      scope: support.function.builtin.intens
      push:
        - match: ';'
          scope: punctuation.terminator.intens
          pop: true
        - match: '(\()'
          captures:
            1: punctuation.section.arguments.begin.intens
          push:
            - meta_scope: meta.function-call.arguments.intens
            - match: \)
              scope: punctuation.section.arguments.end.intens
              pop: true
            - include: func_parameter
            - include: argument_assignment
            - include: anonymous_group
    - match: '\b({{builtin_functions_without_args}})\b'
      scope: support.function.builtin.intens


  run_function:
    - match: \b(ALLOW|DISALLOW|RUN)\b
      scope: meta.function-call.intens
      captures:
        1: support.function.builtin.intens
      push:
        - match: \(
          scope: punctuation.section.group.begin.intens
          set:
            - match: '\b({{name}})\b'
              scope: variable.function.intens
              set:
                - match: \)
                  scope: punctuation.section.group.end.intens
                  pop: true


  while_loop:
    - match: '\b(WHILE)\b'
      scope: keyword.control.intens
      push: while_loop_condition


  while_loop_condition:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: while_loop_condition_body


  while_loop_condition_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - include: function_call
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  if_statement:
    - match: '\b(IF)\b'
      scope: keyword.control.intens
      push: if_statement_condition


  if_statement_condition:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: if_statement_condition_body


  if_statement_condition_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - include: function_call
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  control_keywords:
    - match: '\b(IF|ELSE)\b'
      scope: keyword.control.intens



####################
# UI manager Block #
####################

  ui_manager_block:
    - match: '\b(UI_MANAGER)\b'
      captures:
        1: keyword.other.intens
      push: ui_manager_block_body


  ui_manager_block_body:
    - match: '\b(END)\b\s+\b(UI_MANAGER)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
    - include: ui_struct
    - include: menu_definition


  ui_struct:
    - match: |-
        (?x)\b(
          FIELDGROUP|FOLDER|FORM|IMAGE|LINEPLOT|NAVIGATOR|PLOT2D|PSPLOT|TABLE|THERMO|UNIPLOT|XRT3DPLOT
        )\b
      scope: storage.type.other.intens
      push:
        - include: ui_struct_after_keyword
        - include: end_of_statement_pop


  ui_struct_after_keyword:
    - match: '\b({{name}})\b'
      scope: punctuation.definition.variable.intens
      set: ui_struct_after_name


  ui_struct_after_name:
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block
    - match: \(
      scope: punctuation.section.group.begin.intens
      push: ui_struct_body
    - include: end_of_statement_pop


  ui_struct_body:
    - match: \(
      scope: punctuation.section.group.begin.intens
      push: ui_struct_body
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true
    - match: |-
        (?x)\b(
          LABEL|LEFT|LOG_WINDOW|PIXMAP|SEPARATOR|STD_WINDOW|STRETCH|TABLE|TOP|UNIT|VOID
        )\b
      scope: support.function.builtin.intens
    - match: '\['
      push:
        - match: '\b(FRAME|JUSTIFY|SB)\b'
          scope: variable.parameter.intens
        - include: func_parameter
        - include: function_call
        - match: '\]'
          pop: true
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: parameter_block


  menu_definition:
    - match: '\b(MENU)\b'
      scope: storage.type.other.intens
      push:
        - include: end_of_statement_pop
        - include: menu_definition_after_keyword


  menu_definition_after_keyword:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: [menu_definition_after_keyword, menu_parameter_body]
    - include: end_of_statement_pop


  menu_parameter_body:
    - meta_scope: meta.group.intens
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true
    - match: '='
      scope: keyword.operator.assignment.augmented.intens
    - match: '\b(FORM|SEPARATOR|TRANSACTION)\b'
      scope: variable.parameter.intens
    - match: '\b(FUNC)\b'
      scope: variable.parameter.intens
      push:
        - match: '\b({{name}})\b'
          scope: variable.function.intens
          pop: true


####################
# DB manager Block #
####################

  db_manager_block:
    - match: '\b(DB_MANAGER)\b'
      captures:
        1: keyword.other.intens
      push: db_manager_block_body


  db_manager_block_body:
    - match: '\b(END)\b\s+\b(DB_MANAGER)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
    - match: |-
        (?x)\b(
          FILTER|MENU|MODIFY|TRANSACTION
        )\b
      scope: storage.type.other.intens
    - match: |-
        (?x)\b(
          FORM|HELPTEXT|HIDDEN|IGNORE|NO_LOG|REASON|RESET|SILENT|USERGROUPS
        )\b
      scope: variable.parameter.intens
    - match: |-
        (?x)\b(
          AND|FROM|LIKE|LOGON|LOGOFF|OR|QUERY|SELECT|WHERE
        )\b
      scope: keyword.other.intens


##################
# Language Block #
##################

  language_block:
    - match: '\b(LANGUAGE)\b'
      captures:
        1: keyword.other.intens
      push: language_block_body


  language_block_body:
    - match: '\b(END)\b\s+\b(LANGUAGE)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop
