%YAML 1.2
---

# https://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html

name: INTENS
file_extensions: [des, inc]
scope: source.intens

variables:
  base_type: \b(?:COLOR|COMPLEX|INTEGER|REAL|STRING)\b
  identifier: '{{base_type}}'
  name: \b[A-Za-z_][A-Za-z_0-9]*\b
  illegal_names: |-
        (?x)\b(
          ABORT|COMPLEX|ELSE|END|EXIT|FUNC|IF|INTEGER|NONE|REAL|RETURN|STRING|STRUCT|WHILE
        )\b
  builtin_functions: |-
        (?x)\b(
          ABS|ALLOW|ASSIGN_CORR|ATAN|CLEAR|CONFIRM|COS|DATASET_TEXT|DISABLE|DISALLOW|ENABLE|
          FILENAME|LABEL|MAP|MESSAGEBOX|OPEN|OPEN_URL|PACK|PRINT|QUIT|RANGE|ROUND|RUN|SCALE|
          SAVE|SEND|SET|SIN|SIZE|SQRT|STOP|STRETCH|THUMBNAIL|UNIT|UNMAP|UNSET|VALID|VAR
        )\b


contexts:
  prototype:
    - include: line_comment
    - include: double_quote_string
    - include: numbers
    - include: constants
    - include: predefined_variables
    - include: operators


  double_quote_string:
    - match: '"'
      scope: punctuation.definition.string.begin.intens
      push:
        - meta_scope: string.quoted.double.intens
        - match: \\.
          scope: constant.character.escape.intens
        - match: '"'
          scope: punctuation.definition.string.end.intens
          pop: true


  line_comment:
    - match: //
      scope: punctuation.definition.comment.intens
      push:
        - meta_scope: comment.line.intens
        - match: $
          pop: true


  numbers:
    - match: '\b([0-9][0-9_]*)(\.([0-9][0-9_]*))?([eE][+\-]?([0-9][0-9_]*))?\b'
      scope: constant.numeric.float.decimal.intens
    - match: '\b(-)?[0-9]+\b'
      scope: constant.numeric.intens


  constants:
    - match: \b(DEADLY_SILENT|EOLN|FALSE|HIGH|INDEX|INVALID|NONE|TRUE|OLDVALUE)\b
      scope: constant.language.intens
    - include: reason_expression


  assignments:
    - match: \+=|-=|\*=|/=|//=|%=|@=|&=|\|=|\^=|>>=|<<=|\*\*=
      scope: keyword.operator.assignment.augmented.intens
    - include: simple_assignments

  simple_assignments:
    - match: '=(?!=)'
      scope: keyword.operator.assignment.intens


  reason_expression:
    - match: |-
        (?x)\b(
          REASON_ACTIVATE|REASON_CLEAR|REASON_CLOSE|REASON_CONNECTION|REASON_DROP|
          REASON_DUPLICATE|REASON_INPUT|REASON_INSERT|REASON_MOVE|REASON_OPEN|REASON_PACK|
          REASON_REMOVE|REASON_REMOVE_CONNECTION|REASON_REMOVE_ELEMENT|REASON_SELECT|
          REASON_SELECT_POINT|REASON_SELECT_RECTANGLE|REASON_UNSELECT
        )\b
      scope: constant.other.intens


  predefined_variables:
    - match: \b(COLORBIT|INPUT|THIS)\b
      scope: variable.language.intens


  operators:
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.intens
    - match: \+|\-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic.intens
    - match: \!
      scope: keyword.operator.logical.intens


  main:
    - include: high_level_blocks
    - include: simple_statements


  high_level_blocks:
    - include: datapool_block
    - include: streamer_block
    - include: operator_block
    - include: functions_block
    - include: ui_manager_block
    - include: end_of_propram


  datapool_block:
    - match: '\b(DATAPOOL)\b'
      captures:
        1: keyword.other.intens
      push: datapool_block_body


  datapool_block_body:
    - include: structures
    - include: sets
    - include: variables_definition
    - match: '\b(END)\b\s+\b(DATAPOOL)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


  streamer_block:
    - match: '\b(STREAMER)\b'
      captures:
        1: keyword.other.intens
      push: streamer_block_body


  streamer_block_body:
    - match: '\b(END)\b\s+\b(STREAMER)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


  operator_block:
    - match: '\b(OPERATOR)\b'
      captures:
        1: keyword.other.intens
      push: operator_block_body


  operator_block_body:
    - match: '\b(END)\b\s+\b(OPERATOR)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


  functions_block:
    - match: '\b(FUNCTIONS)\b'
      captures:
        1: keyword.other.intens
      push: functions_block_body


  functions_block_body:
    - include: functions
    - include: variables_definition
    - match: '\b(END)\b\s+\b(FUNCTIONS)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


  ui_manager_block:
    - match: '\b(UI_MANAGER)\b'
      captures:
        1: keyword.other.intens
      push: ui_manager_block_body


  ui_manager_block_body:
    - match: '\b(END)\b\s+\b(UI_MANAGER)\b'
      captures:
        1: keyword.other.intens
        2: keyword.other.intens
      set:
        - include: end_of_statement_pop


  end_of_propram:
    - match: '\b(END)\b\s*(.)'
      captures:
        1: keyword.other.intens
        2: punctuation.terminator.intens


  simple_statements:
    - include: structures
    - include: sets
    - include: variables_definition
    - include: functions


  end_of_statement_pop:
    - match: ;
      scope: punctuation.terminator.intens
      pop: true


  end_of_block_pop:
    - match: '}'
      scope: punctuation.section.block.end.intens
      pop: true


  anonymous_block:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push: anonymous_block_body


  anonymous_block_body:
    - meta_scope: meta.block.intens
    - include: function_statements
    - include: end_of_block_pop


  anonymous_group:
    - match: \(
      scope: punctuation.section.group.begin.intens
      push: anonymous_group_body


  anonymous_group_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - include: function_call  # allow without a semicolon
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  structures:
    - match: \b(STRUCT)\b\s+
      scope: meta.struct.intens
      captures:
        1: storage.type.struct.intens
      push:
        - include: end_of_statement_pop
        - include: structures_after_struct


  structures_after_struct:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: structures_after_name
    - match: '\b({{name}})\b'
      scope: entity.name.struct.intens
      set: structures_after_name


  structures_after_name:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      set: [end_of_statement_pop, structure_body]


  structure_body:
    - meta_scope: meta.struct.intens
    - include: end_of_block_pop
    - include: variables_definition


  variables_definition:
    - match: \b{{base_type}}\b
      scope: storage.type.intens
      push: variables_definition_after_type


  variables_properties:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push: variables_properties_body


  variables_properties_body:
    - match: '\b(EDITABLE|OMIT_TTRAIL)\b'
      scope: storage.modifier.intens
    - include: end_of_block_pop


  variables_definition_after_type:
    - include: variables_properties
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: variables_definition_after_name
    - match: '\b({{name}})\b'
      scope: punctuation.definition.variable.intens
      set: variables_definition_after_name
    - include: end_of_statement_pop
      comment: 'here its an ill-formed definition'


  variables_definition_after_name:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: variables_definition_after_type
    - match: '\('
      scope: punctuation.section.group.begin.intens
      push: variable_conditional_states_body
    - match: '{'
      scope: punctuation.section.group.begin.intens
      push: variable_parameters_body


  variable_conditional_states_body:
    - include: anonymous_group
    - include: simple_assignments
    - include: function_call
    - include: control_keywords
    - match: ','
      scope: punctuation.separator.intens
      set: variable_conditional_states_body
    - match: '\)'
      scope: punctuation.section.group.end.intens
      pop: true


  variable_parameters_body:
    - match: '\b(FUNC)\b'
      scope: variable.parameter.intens
      push:
        - match: '='
          scope: keyword.operator.assignment.augmented.intens
          set:
            - match: '\b({{name}})\b'
              scope: variable.function.intens
              pop: true
    - match: '\b(SET)\b'
      scope: variable.parameter.intens
      push:
        - match: '='
          scope: keyword.operator.assignment.augmented.intens
          set:
            - match: '\b({{name}})\b'
              scope: storage.type.enum.intens
              pop: true
    - match: '\b({{name}})\s*(?:(=)\s*({{name}}))?\b'
      captures:
        1: variable.parameter.intens
        2: keyword.operator.assignment.augmented.intens
        3: variable.other.intens
    - match: \,
      scope: punctuation.separator.intens
      set: variable_parameters_body
    - match: '}'
      scope: punctuation.section.group.end.intens
      pop: true


  sets:
    - match: \b(SET)\b\s+
      captures:
        1: storage.type.enum.intens
      push:
        - include: end_of_statement_pop
        - include: sets_after_set


  sets_after_set:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: sets_after_name
    - match: '\b({{name}})\b'
      scope: entity.name.enum.intens
      set: sets_after_name


  sets_after_name:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: [sets_after_name, set_body]
    - match: \,
      scope: punctuation.separator.intens
      set: sets_after_set
    - include: end_of_statement_pop


  set_body:
    - meta_scope: meta.enum.body.intens
    - include: simple_assignments
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  functions:
    - match: \b(FUNC)\b
      scope: meta.function.intens
      captures:
        1: storage.type.function.intens
      push:
        - include: end_of_statement_pop
        - include: functions_after_func


  functions_after_func:
    - include: function_properties
    - include: function_declaration


  function_properties:
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push: function_properties_body


  function_properties_body:
    - meta_scope: meta.function.parameters.intens
    - include: end_of_block_pop


  function_declaration:
    - match: '{{illegal_names}}'
      scope: invalid.illegal.name.intens
      set: function_body
    - match: '\b({{name}})\b'
      scope: entity.name.function.intens
      set: function_body


  function_body:
    - include: end_of_statement_pop
    - match: \,
      scope: punctuation.separator.intens
      set: function_declaration
      comment: 'forward declaration'
    - match: '{'
      scope: punctuation.section.block.begin.intens
      push:
        - meta_scope: meta.block.intens
        - include: function_statements
        - include: end_of_block_pop


  function_statements:
    - include: variables_definition
    - include: while_loop
    - include: if_statement
    - include: assignments
    - include: anonymous_block
    - include: anonymous_group
    - include: control_keywords
    - include: function_call
    - match: '\b(ABORT|RETURN)\b\s*(;)'
      captures:
        1: keyword.control.intens
        2: punctuation.terminator.intens
    - match: ';'
      scope: punctuation.terminator.intens


  function_call:
    - include: run_function
    - match: '\b({{builtin_functions}})\b'
      scope: support.function.builtin.intens


  run_function:
    - match: \b(RUN)\b
      scope: meta.function-call.intens
      captures:
        1: support.function.builtin.intens
      push:
        - match: \(
          scope: punctuation.section.group.begin.intens
          set:
            - match: '\b({{name}})\b'
              scope: variable.function.intens
              set:
                - match: \)
                  scope: punctuation.section.group.end.intens
                  set: end_of_statement_pop


  while_loop:
    - match: '\b(WHILE)\b'
      scope: keyword.control.intens
      push: while_loop_condition


  while_loop_condition:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: while_loop_condition_body


  while_loop_condition_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  if_statement:
    - match: '\b(IF)\b'
      scope: keyword.control.intens
      push: if_statement_condition


  if_statement_condition:
    - match: \(
      scope: punctuation.section.group.begin.intens
      set: if_statement_condition_body


  if_statement_condition_body:
    - meta_scope: meta.group.intens
    - include: anonymous_group
    - match: \)
      scope: punctuation.section.group.end.intens
      pop: true


  control_keywords:
    - match: '\b(IF|ELSE)\b'
      scope: keyword.control.intens
