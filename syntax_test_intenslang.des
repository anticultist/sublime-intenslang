// SYNTAX TEST "intenslang.sublime-syntax"

// foo
// <- source.intens comment.line.intens

DATAPOOL

INTEGER one, two;
//  <- storage.type.intens
//      ^^^ punctuation.definition.variable.intens
//         ^ punctuation.separator.intens
//           ^^^ punctuation.definition.variable.intens
//              ^ punctuation.terminator.intens

COLOR mycolor1 ();
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
//              ^ punctuation.section.group.end.intens
//               ^ punctuation.terminator.intens


COLOR mycolor2 (
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
        INVALID = (red, black),
//                            ^ punctuation.separator.intens
        < 0 = ("#fff", "#f00"),
//                            ^ punctuation.separator.intens
        RANGE(0, <2.1) = ("#ffffff", "#00ff00"),
//            ^ constant.numeric.intens
//                ^^^ constant.numeric.intens
//                                             ^ punctuation.separator.intens
        2 = ("#ffffff", "#0000f"),
//                               ^ punctuation.separator.intens
        "mytext" = ( "#e0e0e0", "#e0e0e0" ),
//                                         ^ punctuation.separator.intens
        ELSE = ("#ffffff", "#0000ff")
    );
//  ^ punctuation.section.group.end.intens
//   ^ punctuation.terminator.intens

INTEGER baz {TOGGLE};
//  <- storage.type.intens
//      ^^^ punctuation.definition.variable.intens

INTEGER {EDITABLE}
//  <- storage.type.intens
//       ^^^^^^^^ storage.modifier.intens
    foo {LABEL="mylabel", TOGGLE, FUNC=myfunc},
//  ^^^ punctuation.definition.variable.intens
//                      ^ punctuation.separator.intens
//                              ^ punctuation.separator.intens
//                                     ^^^^^^ variable.function.intens
//                                            ^ punctuation.separator.intens
    bar {COLOR=mycolor2};
//  ^^^ punctuation.definition.variable.intens
//                      ^ punctuation.terminator.intens

SET myset ("zero"=0, "one"=1);
// <- storage.type.enum.intens
//  ^^^^^ entity.name.enum.intens
//        ^ punctuation.section.group.begin.intens
//                          ^ punctuation.section.group.end.intens
//                           ^ punctuation.terminator.intens

SET myset2 {INVALID=NONE} ("X"=0, "Y"=1);
//         ^ punctuation.section.group.begin.intens
//                      ^ punctuation.section.group.end.intens

SET myset3 ("A"=1, "B"=2), myset4 ("C"=3, "D"=4);
//                         ^^^^^^ entity.name.enum.intens

SET STRING ();
// <- storage.type.enum.intens
//  ^^^^^^ invalid.illegal.name.intens
//         ^ punctuation.section.group.begin.intens
//          ^ punctuation.section.group.end.intens
//           ^ punctuation.terminator.intens

STRUCT MYSTRUCT {
// <- storage.type.struct.intens
//     ^^^^^^^^ entity.name.struct.intens
//              ^ punctuation.section.block.begin.intens
    INTEGER one, two;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.intens
    REAL three;};
//  ^^^^ storage.type.intens
//       ^^^^^ punctuation.definition.variable.intens
//            ^ punctuation.terminator.intens
//             ^ punctuation.section.block.end.intens
//              ^ punctuation.terminator.intens

STRUCT MYSTRUCT_EXT : MYSTRUCT {
    INTEGER four;
};

STRUCT MYSTRUCT2 {
    INTEGER{ EDITABLE }
//  ^^^^^^^ storage.type.intens
        button1 {LABEL="mylabel", BUTTON, FUNC=myfunc},
        foo {SET=myset};
//               ^^^^^ storage.type.enum.intens

    MYSTRUCT bar;
};

MYSTRUCT2 { OMIT_TTRAIL } foo;

STRUCT REAL {};
// <- storage.type.struct.intens
//     ^^^^ invalid.illegal.name.intens
//          ^ punctuation.section.block.begin.intens
//           ^ punctuation.section.block.end.intens
//            ^ punctuation.terminator.intens

STRUCT MYSTRUCT3 { INTEGER REAL;};
//               ^ punctuation.section.block.begin.intens
//                 ^^^^^^^ storage.type.intens
//                         ^^^^ invalid.illegal.name.intens
//                             ^ punctuation.terminator.intens
//                              ^ punctuation.section.block.end.intens
//                               ^ punctuation.terminator.intens

END DATAPOOL;
//          ^ punctuation.terminator.intens

FUNCTIONS

FUNC myfunc, myfunc2;
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//         ^ punctuation.separator.intens
//           ^^^^^^^ entity.name.function.intens
//                  ^ punctuation.terminator.intens

END FUNCTIONS;
//           ^ punctuation.terminator.intens

STREAMER

my_stream { XML {SCHEMA="myschema.xsd", VERSION="1.0"} }
  (foo, bar, EOLN);

END STREAMER;
//          ^ punctuation.terminator.intens

OPERATOR

SOCKET my_socket {
//               ^ punctuation.section.group.begin.intens
      PORT=666,
//    ^^^^ variable.parameter.intens
//        ^ keyword.operator.assignment.augmented.intens
//         ^^^ constant.numeric.intens
//            ^ punctuation.separator.intens
      STREAM=my_stream,
      FUNC=myfunc},
//         ^^^^^^ variable.function.intens
//               ^ punctuation.section.group.end.intens
//                ^ punctuation.separator.intens
  my_socket2 {
//           ^ punctuation.section.group.begin.intens
      PORT=333,
      STREAM=my_stream2,
      FUNC=myfunc2};
//         ^^^^^^^ variable.function.intens
//                ^ punctuation.section.group.end.intens
//                 ^ punctuation.terminator.intens

PROCESS myprocess_pr: BATCH { "myprocess.pl" };

PROCESSGROUP myprocessgroup_pg {
                "My name",
                FORM=NONE,
                HIDDEN}
    ([foo.bar, EOLN, foo.bar2]
     = myprocess_pr
     (foo.bar, EOLN, foo.bar2));

END OPERATOR;
//          ^ punctuation.terminator.intens

FUNCTIONS

FUNC myfunc {
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//          ^ punctuation.section.block.begin.intens
    INTEGER foo, bar;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.intens

    RUN ( myfunc2 );
//      ^ punctuation.section.group.begin.intens
//        ^^^^^^^ variable.function.intens
//                ^ punctuation.section.group.end.intens
//                 ^ punctuation.terminator.intens

    SEND(HOST="localhost",
         PORT=666,
         STREAM=my_stream);

    foo = 0;
    WHILE(foo < (1 + 4)) {
//  ^^^^^ keyword.control.intens
//       ^ punctuation.section.group.begin.intens
//                     ^ punctuation.section.group.end.intens
        RUN( myfunc3 );
//         ^ punctuation.section.group.begin.intens
//           ^^^^^^^ variable.function.intens
//                   ^ punctuation.section.group.end.intens
//                    ^ punctuation.terminator.intens
        IF (foo != 3) {
            INPUT = OLDVALUE;
            THIS.buzz = 2;
        }
        ELSE {
            bar = ABS(bar - ROUND(1 + 4.8));
//                ^^^ support.function.builtin.intens
//                          ^^^^^ support.function.builtin.intens
            RETURN;
//          ^^^^^^ keyword.control.intens
//                ^ punctuation.terminator.intens
        }
        foo++;
    }

    IF (! RUN(myfunc3) ){
        ABORT;
    }

    IF ( REASON_OPEN ) {
//  ^^ keyword.control.intens
//     ^ punctuation.section.group.begin.intens
//                   ^ punctuation.section.group.end.intens
//                     ^ punctuation.section.block.begin.intens
        ABORT;
//      ^^^^^ keyword.control.intens
//           ^ punctuation.terminator.intens
    }
//  ^ punctuation.section.block.end.intens
    ELSE IF ( REASON_CLOSE ) {
//  ^^^^ keyword.control.intens
//                           ^ punctuation.section.block.begin.intens
    }
//  ^ punctuation.section.block.end.intens
}
// <-  punctuation.section.block.end.intens
;
// <- punctuation.terminator.intens

FUNC myfunc2 {},
// <- storage.type.function.intens
//   ^^^^^^^ entity.name.function.intens
//           ^ punctuation.section.block.begin.intens
//            ^ punctuation.section.block.end.intens
//             ^ punctuation.separator.intens
    myfunc3 {};
//  ^^^^^^^ entity.name.function.intens
//          ^ punctuation.section.block.begin.intens
//           ^ punctuation.section.block.end.intens
//            ^ punctuation.terminator.intens

FUNC{DEADLY_SILENT, UPDATE_FORMS=NONE}
// <- storage.type.function.intens
//  ^ punctuation.section.group.begin.intens
//   ^^^^^^^^^^^^^ variable.parameter.intens
//                ^ punctuation.separator.intens
//                  ^^^^^^^^^^^^ variable.parameter.intens
//                              ^ keyword.operator.assignment.augmented.intens
//                               ^^^^ constant.language.intens
//                                   ^ punctuation.section.group.end.intens
    myfunc4 {};
//  ^^^^^^^ entity.name.function.intens

END FUNCTIONS;
//           ^ punctuation.terminator.intens

UI_MANAGER

FIELDGROUP
// <- storage.type.other.intens
  mygroup_fg { MARGIN(0) } (
//             ^^^^^^ support.function.builtin.intens
    foo.foo
  )
;

FORM
  myform1 {
      "fancy name 1",
      HIDDEN,
      FUNC=myfunc4
    } (
    ),
  myform2 {
      "fancy name 1",
      CLOSE_BUTTON=NONE,
      HIDE_CYCLE
    }(
    );

IMAGE img1 {
        SIZE(256,256),
        SOCKET=my_socket
        SETTINGS=foo.bar};

END UI_MANAGER;
//            ^ punctuation.terminator.intens

END.
// <- keyword.other.intens
// ^ punctuation.terminator.intens
