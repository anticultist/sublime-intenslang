// SYNTAX TEST "semafor-intens.sublime-syntax"

// foo
// <- source.intens comment.line.intens

INTEGER one, two;
//  <- storage.type.intens
//      ^^^ punctuation.definition.variable.intens
//         ^ punctuation.separator.intens
//           ^^^ punctuation.definition.variable.intens
//              ^ punctuation.terminator.intens

COLOR mycolor1 ();
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
//              ^ punctuation.section.group.end.intens
//               ^ punctuation.terminator.intens


COLOR mycolor2 (
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
        INVALID = (red, black),
        < 0 = ("#fff", "#f00"),
        RANGE(0, <2) = ("#ffffff", "#00ff00"),
        2 = ("#ffffff", "#0000f"),
        "mytext" = ( "#e0e0e0", "#e0e0e0" ),
        ELSE = ("#ffffff", "#0000ff")
    );
//  ^ punctuation.section.group.end.intens
//   ^ punctuation.terminator.intens

INTEGER {EDITABLE}
//  <- storage.type.intens
//       ^^^^^^^^ storage.modifier.intens
    foo {LABEL="mylabel", TOGGLE, FUNC=myfunc},
//  ^^^ punctuation.definition.variable.intens
//                                            ^ punctuation.separator.intens
    bar {COLOR=mycolor};
//  ^^^ punctuation.definition.variable.intens
//                     ^ punctuation.terminator.intens

SET myset ("zero"=0, "one"=1);
// <- storage.type.enum.intens
//  ^^^^^ entity.name.enum.intens
//        ^ punctuation.section.group.begin.intens
//                          ^ punctuation.section.group.end.intens
//                           ^ punctuation.terminator.intens

SET myset2 {INVALID=NONE} ("X"=0, "Y"=1);

SET STRING ();
// <- storage.type.enum.intens
//  ^^^^^^ invalid.illegal.name.intens
//         ^ punctuation.section.group.begin.intens
//          ^ punctuation.section.group.end.intens
//           ^ punctuation.terminator.intens

STRUCT MYSTRUCT {
// <- storage.type.struct.intens
//     ^^^^^^^^ entity.name.struct.intens
//              ^ punctuation.section.block.begin.intens
    INTEGER one, two;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.intens
    REAL three;};
//  ^^^^ storage.type.intens
//       ^^^^^ punctuation.definition.variable.intens
//            ^ punctuation.terminator.intens
//             ^ punctuation.section.block.end.intens
//              ^ punctuation.terminator.intens

STRUCT MYSTRUCT2 {
    INTEGER { EDITABLE }
        button1 {LABEL="mylabel", BUTTON, FUNC=myfunc},
        foo {SET=myset};
};

STRUCT REAL {};
// <- storage.type.struct.intens
//     ^^^^ invalid.illegal.name.intens
//          ^ punctuation.section.block.begin.intens
//           ^ punctuation.section.block.end.intens
//            ^ punctuation.terminator.intens

STRUCT MYSTRUCT3 { INTEGER REAL;};
//               ^ punctuation.section.block.begin.intens
//                 ^^^^^^^ storage.type.intens
//                         ^^^^ invalid.illegal.name.intens
//                             ^ punctuation.terminator.intens
//                              ^ punctuation.section.block.end.intens
//                               ^ punctuation.terminator.intens

FUNC myfunc, myfunc2;
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//         ^ punctuation.separator.intens
//           ^^^^^^^ entity.name.function.intens
//                  ^ punctuation.terminator.intens

FUNC myfunc {
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//          ^ punctuation.section.block.begin.intens
    INTEGER foo, bar;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.intens

    RUN ( myfunc2 );
//      ^ punctuation.section.group.begin.intens
//        ^^^^^^^ variable.function.intens
//                ^ punctuation.section.group.end.intens
//                 ^ punctuation.terminator.intens

    foo = 0;
    WHILE(foo < 4) {
        RUN( myfunc3 );
//         ^ punctuation.section.group.begin.intens
//           ^^^^^^^ variable.function.intens
//                   ^ punctuation.section.group.end.intens
//                    ^ punctuation.terminator.intens
        IF (foo != 3) {
            INPUT = OLDVALUE;
            THIS.buzz = 2;
        }
        ELSE {
            bar = 0;
            RETURN;
//          ^^^^^^ keyword.control.intens
//                ^ punctuation.terminator.intens
        }
        foo++;
    }

    IF ( REASON_OPEN ) {
        ABORT;
//      ^^^^^ keyword.control.intens
//           ^ punctuation.terminator.intens
    }
    ELSE IF ( REASON_CLOSE ) {
    }

}
// <-  punctuation.section.block.end.intens
;
// <- punctuation.terminator.intens

FUNC myfunc2 {},
// <- storage.type.function.intens
//   ^^^^^^^ entity.name.function.intens
//           ^ punctuation.section.block.begin.intens
//            ^ punctuation.section.block.end.intens
//             ^ punctuation.separator.intens
    myfunc3 {};
//  ^^^^^^^ entity.name.function.intens
//          ^ punctuation.section.block.begin.intens
//           ^ punctuation.section.block.end.intens
//            ^ punctuation.terminator.intens

FUNC {DEADLY_SILENT, UPDATE_FORMS=NONE}
// <- storage.type.function.intens
    myfunc4 {};
//  ^^^^^^^ entity.name.function.intens

END.
